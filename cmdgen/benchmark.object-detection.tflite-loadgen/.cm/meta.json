{
  "accu_init": {
    "ck_env": [
      "--env.CK_LOADGEN_DATASET_SIZE=<<<dataset_size>>>",
      "--env.CK_VERBOSE=<<<verbosity>>>"
    ],
    "deps": [
      "--dep_add_tags.compiler=<<<compiler_tags>>>",
      "--dep_add_tags.python=v3",
      "--dep_add_tags.mlperf-inference-src=r2.0",
      "--dep_add_tags.weights=<<<model_tags,>>>",
      "--dep_add_tags.edgetpu-lib=<<<edgetpu_tags,>>>",
      "--dep_add_tags.dataset=dataset,object-detection,preprocessed,full,using-<<<preprocessed_using>>>"
    ],
    "record_tags": [
      "mlperf",
      "division.<<<division>>>",
      "task.object-detection",
      "platform.<<<sut>>>",
      "inference_engine.<<<inference_engine>>>",
      "inference_engine_version.<<<inference_engine_version>>>",
      "inference_engine_backend.<<<inference_engine_backend>>>",
      "scenario.<<<scenario>>>",
      "mode.<<<mode>>>",
      "workload.<<<model_readable>>>",
      "<<<preprocessed_tag>>>"
    ],
    "record_uoa_parts": [
      "mlperf",
      "<<<division>>>",
      "<<<sut>>>",
      "<<<inference_engine>>>",
      "<<<inference_engine_version>>>",
      "<<<inference_engine_backend>>>",
      "<<<model_readable>>>",
      "<<<edgetpu_tags>>>",
      "<<<scenario>>>",
      "<<<mode>>><<<mode_extension>>>"
    ],
    "shell_preamble": [
    ]
  },
  "build_map": {
    "buffer_size": {
      "###": {
        "ck_env": "--env.CK_LOADGEN_BUFFER_SIZE=###",
        "record_tags": "buffer_size.###",
        "record_uoa_parts": "buffer_size.###"
      }
    },
    "compile": {
      "yes": {
        "shell_wrapped_cmd": "<<<ck_compile_program>>>"
      }
    },
    "library": {
      "tflite-v1.13.1": {
        "deps": "--dep_add_tags.library=tflite,v1.13.1",
        "program_name": "object-detection-tflite-loadgen",
        "inference_engine": "tflite",
        "inference_engine_version": "v1.13.1",
        "inference_engine_backend": "eigen"
      },
      "tflite-v2.2.0-ruy": {
        "deps": "--dep_add_tags.library=tflite,v2.2.0",
        "program_name": "object-detection-tflite-loadgen",
        "inference_engine": "tflite",
        "inference_engine_version": "v2.2.0",
        "inference_engine_backend": "ruy"
      },
      "tflite-v2.3": {
        "deps": "--dep_add_tags.library=tflite,v2.3.90",
        "program_name": "object-detection-tflite-loadgen",
        "inference_engine": "tflite",
        "inference_engine_version": "v2.3.0",
        "inference_engine_backend": "eigen"
      },
      "tflite-v2.3-ruy": {
        "deps": "--dep_add_tags.library=tflite,v2.3.90,with.ruy",
        "program_name": "object-detection-tflite-loadgen",
        "inference_engine": "tflite",
        "inference_engine_version": "v2.3.0",
        "inference_engine_backend": "ruy"
      },
      "tflite-v2.3-xnnpack": {
        "deps": "--dep_add_tags.library=tflite,v2.3.90,with.xnnpack",
        "program_name": "object-detection-tflite-loadgen",
        "inference_engine": "tflite",
        "inference_engine_version": "v2.3.0",
        "inference_engine_backend": "xnnpack"
      },
      "tflite-v2.5": {
	"deps": "--dep_add_tags.library=tflite,v2.5.0",
	"program_name": "object-detection-tflite-loadgen",
	"inference_engine": "tflite",
	"inference_engine_version": "v2.5.0",
	"inference_engine_backend": "eigen"
      },
      "tflite-v2.5-ruy": {
       "deps": "--dep_add_tags.library=tflite,v2.5.0,with.ruy",
       "program_name": "object-detection-tflite-loadgen",
       "inference_engine": "tflite",
       "inference_engine_version": "v2.5.0",
       "inference_engine_backend": "ruy"
      },
      "tflite-v2.5-xnnpack": {
       "deps": "--dep_add_tags.library=tflite,v2.5.0,with.xnnpack",
       "program_name": "object-detection-tflite-loadgen",
       "inference_engine": "tflite",
       "inference_engine_version": "v2.5.0",
       "inference_engine_backend": "xnnpack"
      },
      "tflite-edgetpu": {
        "ck_env": "--env.USE_EDGETPU=1",
        "deps": "--dep_add_tags.library=tflite,for.coral",
        "program_name": "object-detection-tflite-loadgen",
        "inference_engine": "tflite",
        "inference_engine_version": "for.coral",
        "inference_engine_backend": "edgetpu"
      }
    },
    "mode": {
      "accuracy": {
        "ck_env": "--env.CK_LOADGEN_MODE=AccuracyOnly",
        "mode_extension": "-dataset_size.<<<dataset_size>>>-<<<preprocessed_tag>>>",
        "output_file": "accuracy.txt",
        "recommended_dataset_size": "50000",
        "recommended_verbosity": "1"
      },
      "performance": {
        "ck_env": "--env.CK_LOADGEN_MODE=PerformanceOnly",
        "mode_extension": "<<<performance_mode_extension>>>",
        "output_file": "mlperf_log_summary.txt",
        "recommended_dataset_size": "1024",
        "recommended_verbosity": "0"
      }
    },
    "compliance": {
      "###": {
        "ck_env": "--env.CK_MLPERF_COMPLIANCE_TEST=### --env.CK_LOADGEN_MODE=PerformanceOnly",
        "mode": "performance",
        "mode_extension": "-compliance.###",
        "output_file": "mlperf_log_summary.txt",
        "record_tags": "compliance.###",
        "recommended_repetitions": "1",
        "recommended_dataset_size": "1024",
        "recommended_verbosity": "0"
      }
    },
    "model": {
      "non-quantized": {
        "division": "closed",
        "model_tags": [
          "ssd-mobilenet",
          "###"
        ]
      },
      "v[12]": {
        "division": "open",
        "model_tags": [
          "ssd-mobilenet",
          "###",
          "edgetpu"
        ]
      }
    },
    "model_extra_tags": {
      "###": {
        "model_tags": [
          "###"
        ]
      }
    },
    "edgetpu_lib": {
      "std": {
        "edgetpu_tags": [
          "std_14.1_arm64"
        ]
      },
      "max": {
        "edgetpu_tags": [
          "max_14.1_arm64"
        ]
      }
    },
    "no_record": {
      "yes": {
        "shell_wrapped_cmd": "<<<wrapped_ck_run_program>>>"
      }
    },
    "performance_sample_count_override": {
      "###": {
        "ck_env": "--env.CK_LOADGEN_BUFFER_SIZE=###",
        "record_tags": "buffer_size.###",
        "record_uoa_parts": "buffer_size.###"
      }
    },
    "scenario": {
      "offline": {
        "ck_env": "--env.CK_LOADGEN_SCENARIO=Offline",
        "performance_mode_extension": ""
      },
      "singlestream": {
        "ck_env": "--env.CK_LOADGEN_SCENARIO=SingleStream",
        "performance_mode_extension": "-target_latency.<<<target_latency>>>"
      },
      "range_singlestream": {
        "ck_env": "--env.CK_LOADGEN_SCENARIO=SingleStream",
        "performance_mode_extension": "-max_query_count.<<<max_query_count>>>"
      }
    },
    "sut": {
      "###": {
        "compiler_tags": "gcc,v8"
      },
      "firefly": {
        "compiler_tags": "gcc,v7"
      },
      "hikey": {
        "compiler_tags": "gcc,v7"
      },
      "mac": {
        "compiler_tags": "llvm,v10"
      },
      "mate10pro": {
        "compiler_tags": "llvm,v6"
      },
      "rpi4": {
        "compiler_tags": "gcc,v8"
      },
      "rpi4coral": {
        "compiler_tags": "gcc,v9"
      },
      "xavier": {
        "compiler_tags": "gcc,v7"
      }
    },
    "target_latency": {
      "###": {
        "ck_env": "--env.CK_LOADGEN_TARGET_LATENCY=###",
        "record_tags": "target_latency.###"
      }
    },
    "target_qps": {
      "###": {
        "ck_env": "--env.CK_LOADGEN_TARGET_QPS=###",
        "record_tags": "target_qps.###"
      }
    },
    "target_latency_file": {
      "###": {
        "shell_preamble": "export CK_LOADGEN_TARGET_LATENCY=$(awk -vX=\"<<<sut>>>,<<<library>>>,<<<model_readable>>>\" 'X==$1{print $2;exit}' < ###); [ \"$CK_LOADGEN_TARGET_LATENCY\" ] || { echo 'Error: entry <<<sut>>>,<<<library>>>,<<<model_readable>>> not found in ###, exiting'; exit 1; }; ",
        "ck_env": "--env.CK_LOADGEN_TARGET_LATENCY=$CK_LOADGEN_TARGET_LATENCY",
        "record_tags": "target_latency.$CK_LOADGEN_TARGET_LATENCY",
        "target_latency": "$CK_LOADGEN_TARGET_LATENCY"
      }
    },
    "max_query_count": {
      "###": {
        "ck_env": "--env.CK_LOADGEN_MAX_QUERY_COUNT=\"$(echo ###)\"",
        "record_tags": "max_query_count.\"$(echo ###)\""
      }
    },
    "verbose": {
      "all": {
        "print_output_file": "<<<print_output_file_cmd>>>",
        "screen_output": ""
      },
      "yes": {
        "print_output_file": "<<<print_output_file_cmd>>>"
      }
    },

    "power_mode": {
      "###": {
        "ck_env": "--env.CK_POWER_MODE=###",
        "record_uoa_parts": "power_mode.###",
        "record_tags": "power_mode.###"
      }
    },
    "fan_mode": {
      "###": {
        "ck_env": "--env.CK_FAN_MODE=###",
        "record_uoa_parts": "fan_mode.###",
        "record_tags": "fan_mode.###"
      }
    },

    "power": {
      "yes": {
        "wrapped_ck_benchmark_program": "if [ -n \"`ck list local:experiment:<<<record_uoa_parts->>>-power.client`\" ]; then echo 'Experiment <<<record_uoa_parts->>>-power.client exists, skipping' ; else ck rm --force local:experiment:<<<record_uoa>>>; _cmd=\"$(cat<<'EOF'\n<<<ck_benchmark_program>>> \"@@@{'meta': {'ck_benchmark_program': '<<<ck_benchmark_program>>>'}}\" <<<?print_output_file>>> && <<<_power_log_helper>>>\nEOF\n)\";_cmd=\"$(printf \"%s\\n\" \"$_cmd\" | sed \"s/'/'\\\\\\\\''/g; 1 s/^/'/; $ s/$/'/\" )\"; <<<power_command_args >>> ; fi",
        "power_command_args": [
          "ck", "benchmark",
          "--env.CK_MLPERF_POWER_CLIENT_ADDRESS=<<<power_server_ip>>>",
          "--env.CK_MLPERF_POWER_CLIENT_PORT=<<<power_server_port>>>",
          "--env.CK_MLPERF_POWER_CLIENT_LOADGEN_LOGS=\"$(ck find program:<<<program_name>>>)\"/tmp/loadgen_logs",
          "--env.CK_MLPERF_POWER_CLIENT_WORKLOAD=\\\"\\\"\"$_cmd\"",
          "--record", "--record_repo=local", "--repetitions=1",
          "--record_uoa=<<<record_uoa_parts->>>-power.client",
          "--tags=<<<record_tags,>>>,power.client",
          "program:mlperf-power-client"
        ],
        "_power_log_helper": "mkdir -p \"$CK_MLPERF_POWER_CLIENT_LOADGEN_LOGS\" && cp \"$CK_MLPERF_POWER_CLIENT_LOADGEN_LOGS\"/../mlperf_log_* \"$CK_MLPERF_POWER_CLIENT_LOADGEN_LOGS\"/",

        "record_uoa": "<<<record_uoa_parts->>>-power.workload",
        "record_tags_inner": "<<<record_tags,>>>,power.workload"
      },
      "###": {}
    }
  },
  "cmd_template": "<<<shell_wrapped_cmd>>>",
  "defaults": {
    "ck_benchmark_program": "ck benchmark <<<run_or_benchmark_common>>> --skip_stat_analysis --process_multi_keys --repetitions=<<<repetitions>>> --record --record_repo=local --record_uoa=<<<record_uoa>>> --tags=<<<record_tags_inner>>>",
    "ck_compile_program": "ck compile program:<<<program_name>>> <<<?deps >>>",
    "ck_run_program": "ck run <<<run_or_benchmark_common>>>",
    "dataset_size": "<<<recommended_dataset_size>>>",
    "division": "open",
    "verbosity": "<<<recommended_verbosity>>>",
    "model_readable": "<<<model_tags->>>",
    "preprocessed_tag": "preprocessed_using.<<<preprocessed_using>>>",
    "preprocessed_using": "pillow",
    "edgetpu_tags": "max_14.1_arm64",
    "print_output_file_cmd": "&& cat `ck find program:<<<program_name>>>`/tmp/<<<output_file>>>",
    "record_uoa": "<<<record_uoa_parts->>>",
    "record_tags_inner": "<<<record_tags,>>>",
    "repetitions": "1",
    "power_server_port": "4950",
    "run_or_benchmark_common": "program:<<<program_name>>> <<<screen_output>>> <<<?deps >>> <<<?ck_env >>>",
    "screen_output": "--env.CK_SILENT_MODE=YES --skip_print_timers",
    "shell_wrapped_cmd": "<<<shell_preamble >>> <<<wrapped_ck_benchmark_program>>>",
    "wrapped_ck_benchmark_program": "if [ -n \"`ck list local:experiment:<<<record_uoa>>>`\" ]; then echo 'Experiment <<<record_uoa>>> exists, skipping' ; else <<<ck_benchmark_program>>> \"@@@{'meta': {'ck_benchmark_program': '<<<ck_benchmark_program>>>'}}\" <<<?print_output_file>>> ; fi",
    "wrapped_ck_run_program": "<<<ck_run_program>>> <<<?print_output_file>>>"
  },
  "groups": {
	  "edge": [
		  {"scenario": "singlestream"},
		  {"scenario": "offline"}
	  ],
	  "open": [
		  {"mode": "accuracy"},
		  {"mode": "performance"}
	  ],
	  "closed": [
		  {"mode": "accuracy"},
		  {"mode": "performance"},
		  {"compliance": "TEST01"},
		  {"compliance": "TEST04"},
		  {"compliance": "TEST05"}
	  ]
  }
}
